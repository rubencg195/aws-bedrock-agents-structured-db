import os
import boto3
import json

class MCPClient:
    def __init__(self, bedrock_client, knowledge_base_id):
        self.bedrock_client = bedrock_client
        self.knowledge_base_id = knowledge_base_id

    def query_knowledge_base(self, user_prompt, model_id, max_tokens=256, temperature=0.5):
        # Use Bedrock Knowledge Base RetrieveAndGenerate API
        body = {
            "input": {
                "text": user_prompt
            },
            "retrieveAndGenerateConfiguration": {
                "type": "KNOWLEDGE_BASE",
                "knowledgeBaseConfiguration": {
                    "knowledgeBaseId": self.knowledge_base_id,
                    "modelArn": f"arn:aws:bedrock:{os.environ.get('BEDROCK_REGION', 'us-east-1')}::foundation-model/{model_id}",
                    "retrievalConfiguration": {
                        "vectorSearchConfiguration": {
                            "numberOfResults": 5
                        }
                    },
                    "generationConfiguration": {
                        "maxTokens": max_tokens,
                        "temperature": temperature
                    }
                }
            }
        }
        
        response = self.bedrock_client.invoke_model(
            modelId="anthropic.claude-3-sonnet-20240229-v1:0",
            body=json.dumps(body),
            accept="application/json",
            contentType="application/json"
        )
        
        result = response["body"].read().decode("utf-8")
        return json.loads(result)

def lambda_handler(event, context):
    print(event)
    bedrock = boto3.client("bedrock-runtime", region_name=os.environ.get("BEDROCK_REGION", "us-east-1"))
    model_id = event.get("model_id", os.environ.get("MODEL_ID"))
    prompt = event.get("prompt", "Hello from Lambda!")
    knowledge_base_id = event.get("knowledge_base_id", os.environ.get("KNOWLEDGE_BASE_ID"))
    
    try:
        mcp_client = MCPClient(
            bedrock_client=bedrock,
            knowledge_base_id=knowledge_base_id
        )
        
        result = mcp_client.query_knowledge_base(
            user_prompt=prompt,
            model_id=model_id,
            max_tokens=256,
            temperature=0.5
        )
        
        return {
            "statusCode": 200,
            "body": json.dumps(result)
        }
    except Exception as e:
        return {
            "statusCode": 500,
            "error": str(e)
        }