import os
import boto3
import json
import traceback

class MCPClient:
    def __init__(self, bedrock_client, knowledge_base_id, model_arn):
        self.bedrock_client = bedrock_client
        self.knowledge_base_id = knowledge_base_id
        self.model_arn = model_arn

    def query_knowledge_base(self, user_prompt, max_tokens=256, temperature=0.5):
        # Use Bedrock Knowledge Base RetrieveAndGenerate API
        response = self.bedrock_client.retrieve_and_generate(
            input={
                "text": user_prompt
            },
            retrieveAndGenerateConfiguration={
                "type": "KNOWLEDGE_BASE",
                "knowledgeBaseConfiguration": {
                    "knowledgeBaseId": self.knowledge_base_id,
                    "modelArn": self.model_arn,
                    "retrievalConfiguration": {
                        "vectorSearchConfiguration": {
                            "numberOfResults": 5
                        }
                    },
                    "generationConfiguration": {
                        "inferenceConfig": {
                            "textInferenceConfig": {
                                "maxTokens": max_tokens,
                                "temperature": temperature
                            }
                        }
                    }
                }
            }
        )
        
        return response

def parse_response(response):
    output = response["output"]["text"]
    citations = list()
    for citation in response["citations"]:
        for retrieved_reference in citation["retrievedReferences"]:
            print(retrieved_reference)
            citations.append({
                "content": retrieved_reference["content"]["text"],
                "location": retrieved_reference["location"]["s3Location"]["uri"]
            })
    return output, citations

def lambda_handler(event, context):
    print(event)
    print(os.environ.get("BEDROCK_REGION"))
    print(os.environ.get("MODEL_ARN"))
    print(os.environ.get("KNOWLEDGE_BASE_ID"))
    bedrock = boto3.client("bedrock-agent-runtime", region_name=os.environ.get("BEDROCK_REGION", "us-east-1"))
    model_arn = event.get("model_arn", os.environ.get("MODEL_ARN"))
    prompt = event.get("question", "Find me all transactions done in New York.")
    knowledge_base_id = event.get("knowledge_base_id", os.environ.get("KNOWLEDGE_BASE_ID"))
    
    try:
        mcp_client = MCPClient(
            bedrock_client=bedrock,
            knowledge_base_id=knowledge_base_id,
            model_arn=model_arn
        )
        
        result = mcp_client.query_knowledge_base(
            user_prompt=prompt,
            max_tokens=256,
            temperature=0.5
        )
        
        output, citations = parse_response(result)

        return {
            "statusCode": 200,
            "question": prompt,
            "output": output,
            "citations": citations
        }
    except Exception as e:
        print(e)
        print(traceback.format_exc())
        return {
            "statusCode": 500,
            "error": str(e),
        }